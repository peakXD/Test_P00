import random

# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå
words =[ 'python', 'hangman', 'challenge', 'computer', 'programming', 'network', 'security', 'algorithm', 'function', 'variable',
          'syntax' , 'data', 'structure', 'database', 'software', 'hardware', 'internet', 'website', 'application', 'developer', 
          'engineer', 'debugging', 'testing','version', 'control', 'repository', 'framework', 'library', 'module',  'switching',
          'script', 'code', 'editor', 'compiler', 'interpreter', 'runtime', 'exception', 'error', 'bug', 'patch', 
          'update', 'refactor', 'optimization', 'performance', 'scalability', 'usability', 'accessibility', 'interface', 'design', 'architecture', 
          'user', 'experience', 'feedback', 'documentation', 'tutorial', 'guide', 'reference', 'community', 'forum', 'discussion', 
          'collaboration', 'project', 'task', 'issue', 'milestone', 'sprint', 'agile', 'scrum', 'kanban', 'waterfall', 
          'methodology', 'process', 'workflow', 'automation', 'integration', 'deployment', 'cloud', 'virtualization', 'containerization', 'microservices', 
          'api', 'webservice', 'protocol', 'http', 'https', 'tcp', 'udp', 'ip', 'dns', 'ssl', 
          'tls', 'encryption', 'authentication', 'authorization', 'session', 'cookie', 'token', 'csrf', 'xss', 'sql', 
          'injection', 'vulnerability', 'exploit', 'penetration', 'networking', 'audit', 'compliance', 'regulation', 'policy', 'routing',  
          'risk','incident', 'response', 'backup', 'recovery', 'disaster', 'planning',  'monitoring', 'logging', 
          'alerting', 'metrics', 'dashboard', 'visualization', 'analytics', 'bigdata', 'machinelearning', 'artificialintelligence', 'deeplearning', 'neuralnetwork', 
          'dataanalysis', 'datavisualization', 'businessintelligence', 'reporting', 'dashboarding', 'datawarehouse', 'datamining', 'dataengineering', 'datascience', 'statistics', 
          'probability', 'linearalgebra', 'calculus','firewall', 'graph', 'theory', 'combinatorics', 'settheory', 'logic', 'discrete', 
          'mathematics', 'numbertheory', 'cryptography', 'informationtheory', 'complexitytheory',  'computationaltheory', 'algorithmic', 'game', 'decision', 
           'proxy' 'operationsresearch', 'simulation', 'modeling', 'queuing', 'contentdeliverynetwork', 'scheduling', 'inventory', 'management', 
          'supplychain','logistics', 'transportation', 'protocols','vpn', 'loadbalancing', 'caching']

# ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏≥
word = random.choice(words)
guessed_letters = []
tries = 6

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥
def display_word():
    return ' '.join([letter if letter in guessed_letters else '_' for letter in word])

print("üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏Å‡∏° Hangman!")
print(display_word())

# ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏Å‡∏°
while tries > 0 and set(word) != set(guessed_letters):
    guess = input("‡πÄ‡∏î‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£: ").lower()
    
    if guess in guessed_letters:
        print("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏î‡∏≤‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡∏î‡∏π‡∏ô‡∏∞")
    elif guess in word:
        guessed_letters.append(guess)
        print("‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! üòÉ")
    else:
        guessed_letters.append(guess)
        tries -= 1
        print(f"‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏à‡πâ‡∏≤! ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏≠‡∏µ‡∏Å {tries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á üò¢")
    
    print(display_word())

# ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
if set(word) == set(guessed_letters):
    print("‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞! üéâ ‡∏Ñ‡∏≥‡∏Ñ‡∏∑‡∏≠:", word)
else:
    print("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ ‡∏Ñ‡∏≥‡∏Ñ‡∏∑‡∏≠:", word)